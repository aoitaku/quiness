import Style, { IStyleProperties } from './style';
export interface IWidthMeasurable {
    width: number;
}
export interface IHeightMeasurable {
    height: number;
}
export declare type ISizeMeasurable = IWidthMeasurable & IHeightMeasurable;
export interface IComponent {
    readonly id: string;
    rawX: number;
    rawY: number;
    rawWidth: number;
    rawHeight: number;
    contentWidth: number;
    contentHeight: number;
    readonly x: number;
    readonly y: number;
    readonly position: 'relative' | 'absolute';
    readonly top?: number;
    readonly left?: number;
    readonly bottom?: number;
    readonly right?: number;
    readonly layout: 'flow' | 'horizontalBox' | 'verticalBox';
    readonly justifyContent: 'center' | 'left' | 'spaceBetween' | 'right';
    readonly alignItems: 'center' | 'spaceBetween' | 'top' | 'bottom';
    readonly breakAfter: boolean;
    readonly visible: boolean;
    readonly horizontalItemArrangement: 'real' | 'ratio';
    readonly verticalItemArrangement: 'real' | 'ratio';
    readonly paddingTop: number;
    readonly paddingRight: number;
    readonly paddingBottom: number;
    readonly paddingLeft: number;
    readonly width: number;
    readonly height: number;
    readonly layoutWidth: number;
    readonly layoutHeight: number;
    readonly marginTop: number;
    readonly marginRight: number;
    readonly marginBottom: number;
    readonly marginLeft: number;
    readonly horizontalMargin: number;
    readonly verticalMargin: number;
    offsetLeft(parent: Component): number;
    offsetRight(parent: Component): number;
    horizontalOffset(parent: Component): number;
    testIfComponent(obj: any): obj is Component;
    offsetTop(parent: Component): number;
    offsetBottom(parent: Component): number;
    verticalOffset(parent: Component): number;
    innerWidth(parent: Component | IWidthMeasurable): number;
    innerHeight(parent: Component | IHeightMeasurable): number;
    relayout(ox: number, oy: number, parent: ISizeMeasurable): void;
    move(toX: number, toY: number, parent: ISizeMeasurable): void;
    resize(parent: ISizeMeasurable): void;
}
export default class Component implements IComponent {
    readonly id: string;
    rawX: number;
    rawY: number;
    rawWidth: number;
    rawHeight: number;
    contentWidth: number;
    contentHeight: number;
    protected readonly style: Style;
    constructor(id: string, style?: IStyleProperties);
    readonly x: number;
    readonly y: number;
    readonly position: "relative" | "absolute";
    readonly top: number | undefined;
    readonly left: number | undefined;
    readonly bottom: number | undefined;
    readonly right: number | undefined;
    readonly layout: "flow" | "horizontalBox" | "verticalBox";
    readonly justifyContent: "left" | "center" | "spaceBetween" | "right";
    readonly alignItems: "center" | "spaceBetween" | "top" | "bottom";
    readonly breakAfter: boolean;
    readonly visible: boolean;
    readonly horizontalItemArrangement: "real" | "ratio";
    readonly verticalItemArrangement: "real" | "ratio";
    readonly paddingTop: number;
    readonly paddingRight: number;
    readonly paddingBottom: number;
    readonly paddingLeft: number;
    readonly width: number;
    readonly height: number;
    readonly layoutWidth: number;
    readonly layoutHeight: number;
    readonly marginTop: number;
    readonly marginRight: number;
    readonly marginBottom: number;
    readonly marginLeft: number;
    readonly horizontalMargin: number;
    offsetLeft(parent: Component): number;
    offsetRight(parent: Component): number;
    horizontalOffset(parent: Component): number;
    testIfComponent(obj: any): obj is Component;
    readonly verticalMargin: number;
    offsetTop(parent: Component): number;
    offsetBottom(parent: Component): number;
    verticalOffset(parent: Component): number;
    innerWidth(parent: Component | IWidthMeasurable): number;
    innerHeight(parent: Component | IHeightMeasurable): number;
    relayout(ox: number | undefined, oy: number | undefined, parent: IComponent | ISizeMeasurable): void;
    move(toX: number, toY: number, parent: ISizeMeasurable): void;
    resize(parent: IComponent | ISizeMeasurable): void;
    private moveX(toX, parent);
    private moveY(toY, parent);
}
